
###########################################################################
#                             Custom Commands                             #
###########################################################################

snippet cons "console log" w
console.log($1);$0
endsnippet

snippet iife "IIFE function closure" w
(function() {
  $0
}());
endsnippet

snippet ; "object property" w
$1: $0
endsnippet

snippet $ "jquery object" w
$('$1')$0;
endsnippet

snippet J "jquery object" w
jQuery($1)$0;
endsnippet

snippet $( "document ready" w
$(function() {
  $0
});
endsnippet

snippet require "requirejs"
require([$1], function() {
  $0
});
endsnippet

snippet req "require"
require('$1')$0
endsnippet

snippet req; "require"
require('$1');$0
endsnippet

snippet define "define (requirejs)"
define(${1:[
  $2
], }function() {
  $0
});
endsnippet

snippet pro ".prototype = function"
$1.prototype.$2 = function($3) {
	$4
};
endsnippet

snippet proto ".prototype. full"
$1.prototype.$2 = ${3:function($4) }{
	$0
}$5;
endsnippet

snippet def "Object.defineProperty"
Object.defineProperty($1.prototype, '$2', {
	get: function() {
		$3
	},
	set: function($4) {
		$5
	}
});
$0
endsnippet

snippet bb "Backbone extend"
Backbone.${1:View}.extend({
  $0
});
endsnippet

snippet exp "expect (Jasmine)" w
expect($1).to${2:Equal}($3);$0
endsnippet

snippet it "it (Jasmine)" w
it('$1', function() {
	$2
});$0
endsnippet

snippet desc "describe (Jasmine)" w
describe('$1', function() {
	$2
});$0
endsnippet

snippet glo "jshint globals declaration"
/*globals ${1:Backbone:false}$2 */
$0
endsnippet

snippet comp "ko.computed" w
ko.computed(function() {
  $0
})${1:,}
endsnippet

snippet obs "ko.observable" w
ko.observable($1)$0
endsnippet

snippet extend "underscore extend" w
_(${1:obj}).extend({
  $0
});
endsnippet

snippet _ "Underscore wrapper" w
_(${1:obj}).${2:extend}(${3:{}});
endsnippet

snippet { "curly opening" w
{
  $1$0
}$2
endsnippet

snippet {, "curly with comma at end" w
{
  $1$0
},$2
endsnippet

snippet [{ "curly opening in array" w
[{
  $1$0
}]$2
endsnippet

snippet {; "curly opening" w
{
  $1$0
};$2
endsnippet

snippet ({ "object argument" i
({
  $1
});$0
endsnippet

snippet ( "bracket opening" i
($1)$0
endsnippet

snippet ' "quote opening" i
'$1'$0
endsnippet

snippet [ "Description" w
[
  $1$0
]$2
endsnippet

snippet <% "jsp-like inline template"
<%= $1 %>$0
endsnippet

snippet unwrap "ko unwrap observable" i
ko.utils.unwrapObservable($1)$0
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet :f "Object Method" w
${1:name}: function(${2:args}) {
	$0
},${3}
endsnippet

snippet :, "Object Value JS" w
${1:value_name}:${0:value},
endsnippet

snippet for "for (...) {...}" w
for ($1 = 0; $2 < $3.length; $4++) {
  $0
}
endsnippet

snippet fun "anonymous function" w
function($1) {
  $0
}$2
endsnippet

snippet f; "anon function with one closing" w
function() {
  $1
});$0
endsnippet

snippet fun; "anon function with arg, and one closing" w
function($1) {
  $2
});$0
endsnippet

snippet func "function" w
function $1($2) {
  $0
}$3
endsnippet

snippet if "if" w
if ($1) {
  $3
}${2: else {
  $4
}}$0
endsnippet

snippet timeout "setTimeout function" w
setTimeout(function() {
  $0
}, ${1:100});
endsnippet

snippet ass "assert" !b
assert($1);$0
endsnippet

snippet ase "assert equal" !b
assert.equal($1, $2);$0
endsnippet

snippet ade "assert deep equal" !b
assert.deepEqual($1, $2);$0
endsnippet

# vim:ft=snippets:
