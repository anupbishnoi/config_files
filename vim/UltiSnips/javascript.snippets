
###########################################################################
#                             Custom Commands                             #
###########################################################################

snippet cons "console log" w
console.log($1);$0
endsnippet

snippet closure "IIFE function closure" w
(function () {
    "use strict";

    $0
}());
endsnippet

snippet iife "iife without use_strict"
(function () {
    $0
}());
endsnippet

snippet j "jquery object" w
$($1)$0;
endsnippet  

snippet J "jquery object" w
jQuery($1)$0;
endsnippet  

snippet $( "document ready" w
$(document).ready(function () {
    $0
});
endsnippet

snippet bb "Backbone extend"
Backbone.${1:View}.extend({
    $0
});
endsnippet

snippet comp "ko.computed" w
ko.computed(function () {
    $0
})${1:,}
endsnippet

snippet obs "ko.observable" w
ko.observable($1)$0
endsnippet

snippet extend "underscore extend" w
_(${1:obj}).extend({
    $0
});
endsnippet

snippet _ "Underscore wrapper" w
_(${1:obj}).${2:extend}(${3:{}});
endsnippet

snippet { "Description" i
{
    $0
}${1:}
endsnippet

snippet [ "Description" w
[
    $0
]${1:}
endsnippet

snippet jsp "jsp-like inline template"
<%= $1 %>$0
endsnippet

snippet "jsp "jsp-like inline template"
"<%= $1 %>$0
endsnippet

snippet unwrap "ko unwrap observable" i
ko.utils.unwrapObservable($1)$0
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet "":f "object method string" w
"${1:${2:#thing}:${3:click}}": function (element){
	$0
}${10:,}
endsnippet

snippet :f "Object Method" w
${1:method_name}: function (${3:attribute}){
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS" w
${1:value_name}:${0:value},
endsnippet

snippet forf "for (...) {...} (faster)" w
for (${2:i} = ${1:list}.length - 1; $2 >= 0; $2 -= 1){
	${3:$1[$2]}$0
}
endsnippet

snippet for "for (...) {...}" w
for (var ${2:i} = 0; $2 < ${1:list}.length; $2 += 1) {
    $0
}
endsnippet

snippet fun "anonymous function" w
function ($1) {
    $0
}$2
endsnippet

snippet func "function" w
function $1($2) {
    $0
}$3
endsnippet

snippet if "if" w
if ($1) {
    $3
}${2: else {
    $4
}}$0
endsnippet

snippet timeout "setTimeout function" w
setTimeout(function () {
    $0
}, ${1:100});
endsnippet

# vim:ft=snippets:
