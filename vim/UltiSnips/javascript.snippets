
###########################################################################
#                             Custom Commands                             #
###########################################################################

snippet cons "console log" w
console.log($1);$0
endsnippet

snippet ; "object property" w
$1: $0
endsnippet

snippet req "require"
require('$1');$0
endsnippet

snippet def "Object.defineProperty"
Object.defineProperty($1.prototype, '$2', {
	get: function() {
		$3
	},
	set: function($4) {
		$5
	}
});
$0
endsnippet

snippet exp "expect (Jasmine)" w
expect($1).to${2:.deep}.equal($3);
$0
endsnippet

snippet it "it (Jasmine)" w
it('$1', ${2}function($3) {
	$4
});$0
endsnippet

snippet desc "describe (Jasmine)" w
describe('$1', function() {
	$2
});$0
endsnippet

snippet glo "jshint globals declaration"
/* globals ${1:Backbone:false}$2 */
$0
endsnippet

snippet { "curly opening" w
{
	$1$0
}$2
endsnippet

snippet {, "curly with comma at end" w
{
	$1$0
},$2
endsnippet

snippet [{ "curly opening in array" w
[{
	$1$0
}]$2
endsnippet

snippet {; "curly opening" w
{
	$1
};
$0
endsnippet

snippet ({ "object argument" i
({
	$1
});$0
endsnippet

snippet ( "bracket opening" i
($1)$0
endsnippet

snippet ' "quote opening" w
'$1'$0
endsnippet

snippet (' "Description" i
('$1')$0
endsnippet

snippet " "double quote opening" i
'$1'$0
endsnippet

snippet [ "Description" w
[
	$1$0
]$2
endsnippet

snippet <% "jsp-like inline template"
<%= $1 %>$0
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet :f "Object Method" w
${1:name}: function $1(${2:args}) {
	$4
},$3
$0
endsnippet

snippet :, "Object Value JS" w
${1:key}: ${0:value},
endsnippet

snippet for "for (...) {...}" w
for (${1: var i} = 0; ${2:i} < ${3:list}.length; $2++) {
	$4
}
$0
endsnippet

snippet fun "anonymous function" w
function($1) {
	$3
}$2$0
endsnippet

snippet f; "anon function with one closing" w
function() {
	$1
});
$0
endsnippet

snippet fun; "anon function with arg, and one closing" w
function($1) {
	$2
});
$0
endsnippet

snippet func "function" w
function $1($2) {
	$4
}$3$0
endsnippet

snippet if "if" w
if ($1) {
	$3
}${2: else {
	$4
}}$0
endsnippet

snippet settime "setTimeout function" w
setTimeout(function() {
	$2
}, ${1:100});$0
endsnippet

snippet ass "assert" !b
assert($1);$0
endsnippet

snippet ase "assert equal" !b
assert.equal($1, $2);$0
endsnippet

snippet ade "assert deep equal" !b
assert.deepEqual($1, $2);$0
endsnippet

#### REACT STUFF ####

snippet div "div" w
<div$1>
	$2
</div>$0
endsnippet

# vim:ft=snippets:
